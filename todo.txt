
- chord identification algorithm (on it)
    - alt chords

- interval : from step to name "minor second", "perfect fifth", etc.

- another toFormula but with formula taking always the root as reference.

    - creation of chord objects and similar must accept variable arguments as input

- "deconstructor" iterates through all permutations of different sizes (max the original size), to see what chords are 
    inside a collection of notesg

- constants like formula object names to upper case

- scale notation fixer: use sharp and flats correctly in a scale

- option to change sharps to flats and the other way around

- sharp to standard mode (flat) transformer to deal internally only with flats

- implement valueOf and toString to all your classes and objects

- process.toFormula needs to handle other data types

- (IDEA): give more than 12 possible chord recognition results, analyze the chord with every step of the formula as the root, 
    and every note that is not in the formula as a no root

- Data structure for chord name and formulas that only saves one permutation of the formula and links all names associated with the permutations of 
    that formula, maybe? Associate the names with where the formula is started, something similar to the paper on 4 note chord qualities.

- Pool data structure: should it be also an array of Note? And itself be an object?

- Change your OOP to one that uses the prototype; and one that can recognize inheritance chain using instanceof

- Classes in sounds that use typechecking in the constructor need to be able to handle prototype inheritance (the calling of the constructor without arguments)